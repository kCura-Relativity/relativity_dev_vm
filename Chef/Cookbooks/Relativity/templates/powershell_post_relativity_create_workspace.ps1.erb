##########################################################################
# This script creates a workspaces.                                      #
#                                                                        #
# How to use:                                                            #
# 1. Point the include section to the directory of your Relativity       #
#    Client Dlls                                                         #
#                                                                        #
# 2. Update the Config section dlls                                      #
#                                                                        #
# 3. Execute the script                                                  #
#                                                                        #
##########################################################################

#############################INCLUDE SECTION##############################
$ScriptDir = Split-Path -parent $MyInvocation.MyCommand.Path
Import-Module $ScriptDir\powershell_functions.ps1 -force
Add-Type -Path "C:\Program Files\kCura Corporation\Relativity\Library\kCura.Relativity.Client.dll"
Add-Type -Path "C:\Program Files\kCura Corporation\Relativity\Library\Relativity.API.dll"
##########################################################################

############################USER CONFIG SECTION###########################
$newWorkspaceName = "<%= @workspace_name %>"
$relativityUrl = "<%= @relativity_services_url %>"
$relativityUsername = "<%= @relativity_username %>"
$relativityPassword = "<%= @relativity_password %>"
$maxRetry = 3
###########################################################################

$relativityServicesUrl = New-Object -TypeName System.Uri -ArgumentList $relativityUrl

# First check if workspace with the same name already exists
[Boolean]$workspaceExists
$retryCnt = 0
$existingWorkspaceArtifactID = 0
while ($retryCnt -lt $maxRetry -and $existingWorkspaceArtifactID -eq 0) {
  $rsapiClient = $NULL

  try {
    $rsapiClient = GetRsapiClient $relativityServicesUrl $relativityUsername $relativityPassword
    $existingWorkspaceArtifactID = QueryWorkspace $rsapiClient $newWorkspaceName
    if ($existingWorkspaceArtifactID -gt 0) {
      $workspaceExists = $true
    }
  }
  Catch [Exception] {
    Write-Host "$($_.Exception.GetType().FullName) $($_.Exception.Message)"
  }
  finally {
    if ($rsapiClient -ne $NULL) {
      $rsapiClient.Dispose()
    }
  }

  $retryCnt++
}

# Create workspace and install app if the workspace not already exists
if ($workspaceExists) {
  Write-Host "Skipping Workspace creation and Data Sampler App install."
}
else {
  #Create Workspace
  $retryCnt = 0
  $newWorkspaceArtifactID = 0
  while ($retryCnt -lt $maxRetry -and $newWorkspaceArtifactID -eq 0) {
    $rsapiClient = $NULL

    try {
      $rsapiClient = GetRsapiClient $relativityServicesUrl $relativityUsername $relativityPassword
      $newWorkspaceArtifactID = CreateWorkspace $rsapiClient $newWorkspaceName

      # Sleep for 5 min for the workspace to upgrade
      Start-Sleep -s 300
    }
    Catch [Exception] {
      Write-Host "$($_.Exception.GetType().FullName) $($_.Exception.Message)"
    }
    finally {
      if ($rsapiClient -ne $NULL) {
        $rsapiClient.Dispose()
      }
    }

    $retryCnt++
  }

  if (($workspaceExists -eq $true) -or ($newWorkspaceArtifactID -gt 0)) {
    #
    #SUCCESS
    exit 0
  }
  else {
    #
    #FAILURE
    exit 1
  }
}
