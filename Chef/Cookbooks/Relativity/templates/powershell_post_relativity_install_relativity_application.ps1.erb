##########################################################################
# This script installs a relativity application.                         #
#                                                                        #
# How to use:                                                            #
# 1. Point the include section to the directory of your Relativity       #
#    Client Dlls                                                         #
#                                                                        #
# 2. Update the Config section dlls                                      #
#                                                                        #
# 3. Execute the script                                                  #
#                                                                        #
##########################################################################

#############################INCLUDE SECTION##############################
$ScriptDir = Split-Path -parent $MyInvocation.MyCommand.Path
Import-Module $ScriptDir\powershell_functions.ps1 -force
Add-Type -Path "C:\Program Files\kCura Corporation\Relativity\Library\kCura.Relativity.Client.dll"
Add-Type -Path "C:\Program Files\kCura Corporation\Relativity\Library\Relativity.API.dll"
##########################################################################

############################USER CONFIG SECTION###########################
$applicationRAPFileName = "<%= @rap_file_name %>"
$appInstalled = $FALSE
$newWorkspaceName = "<%= @sample_workspace_name %>"
$fullFilePathRap = "<%= @rap_file_path %>"
$relativityUrl = "<%= @relativity_services_url %>"
$relativityUsername = "<%= @relativity_username %>"
$relativityPassword = "<%= @relativity_password %>"
$relativityLibraryFolder = "C:\\Program Files\\kCura Corporation\\Relativity\\Library" #Use double backslashes here
$maxRetry = 3
###########################################################################

if ([System.IO.File]::Exists($fullFilePathRap) -eq $FALSE) {
  Write-Error "RAP file does not exist $($fullFilePathRap)"
  Return
}

$relativityServicesUrl = New-Object -TypeName System.Uri -ArgumentList $relativityUrl

# Retrieve the Workspace ArtifactID
[Boolean]$workspaceExists
$retryCnt = 0
$existingWorkspaceArtifactID = 0
while ($retryCnt -lt $maxRetry -and $existingWorkspaceArtifactID -eq 0) {
  $rsapiClient = $NULL

  try {
    $rsapiClient = GetRsapiClient $relativityServicesUrl $relativityUsername $relativityPassword
    $existingWorkspaceArtifactID = QueryWorkspace $rsapiClient $newWorkspaceName
    if ($existingWorkspaceArtifactID -gt 0) {
      $workspaceExists = $true
    }
  }
  Catch [Exception] {
    Write-Host "$($_.Exception.GetType().FullName) $($_.Exception.Message)"
  }
  finally {
    if ($rsapiClient -ne $NULL) {
      $rsapiClient.Dispose()
    }
  }

  $retryCnt++
}

# Install App only if workspace exists
if ($workspaceExists) {
    Write-Host "Installing: $($applicationRAPFileName)"

    #Install Data Sampler Application into Newly Created Workspace
    $retryCnt = 0

    while ($retryCnt -lt $maxRetry -and $appInstalled -eq $FALSE) {
      $rsapiClient = $NULL
      try {
        $rsapiClient = GetRsapiClient $relativityServicesUrl $relativityUsername $relativityPassword
        $appInstalled = InstallApplication $rsapiClient $existingWorkspaceArtifactID $fullFilePathRap

        # Sleep for 5 seconds after each application install
        Start-Sleep -s 5
      }
      Catch [Exception] {
        Write-Host "$($_.Exception.GetType().FullName) $($_.Exception.Message)"
      }
      finally {
        if ($rsapiClient -ne $NULL) {
          $rsapiClient.Dispose()
        }
      }
   
      $retryCnt++
    }
}
else{
  Write-Host "Could not find workspace: $($newWorkspaceName) to install RAP File: $($applicationRAPFileName)"
}

if ($appInstalled) {
    #
    #SUCCESS
    exit 0
}
else {
    #
    #FAILURE
    exit 1
}

